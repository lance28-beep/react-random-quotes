{"version":3,"sources":["features/counterSlice.js","Handlers.js","Quotes.js","App.js","app/store.js","index.js"],"names":["quoteSlice","createSlice","name","initialState","quotes","reducers","randomQoutes","state","action","payload","actions","selectCount","Handlers","Click","color","gquote","useSelector","className","id","target","href","encodeURIComponent","quote","author","onClick","style","backgroundColor","Quotes","App","useState","qoutes","setqoutes","dispatch","useDispatch","colors","backGround","setbackGround","useEffect","axios","get","then","res","data","Math","floor","random","length","store","configureStore","reducer","quotedReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAKaA,EAAaC,YAAY,CACpCC,KAAM,SACNC,aALmB,CACnBC,OAAQ,MAKRC,SAAU,CACRC,aAAc,SAACC,EAAOC,GACpBD,EAAMH,OAASI,EAAOC,YAIbH,EAAiBN,EAAWU,QAA5BJ,aACFK,EAAc,SAACJ,GAAD,OAAWA,EAAMH,OAAOA,QACpCJ,IAAf,Q,gCCceY,MAxBf,YAAqC,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MACnBC,EAASC,YAAYL,GAC3B,OACE,sBAAKM,UAAU,WAAf,UACE,mBACEC,GAAG,cACHC,OAAO,SACPC,KAAI,qFAAgFC,mBAClF,YAAMN,QAAN,IAAMA,OAAN,EAAMA,EAAQO,OAAQ,MAAtB,OAA6BP,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAQQ,UAJzC,SAOE,cAAC,IAAD,MAEF,wBACEL,GAAG,YACHM,QAASX,EACTY,MAAO,CAAEC,gBAAgB,GAAD,OAAKZ,IAH/B,wB,MCPSa,MATf,YAAoC,IAAlBL,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,OACvB,OACE,sBAAKN,UAAU,SAAf,UACE,qBAAIC,GAAG,OAAP,UAAc,qCAAeI,KAC7B,sBAAMJ,GAAG,SAAT,SAAmBK,QC2EVK,MA1Ef,WACE,IAAMb,EAASC,YAAYL,GAC3B,EAA4BkB,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAWC,YAAY3B,GACvB4B,EAAS,CACb,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGF,EAAoCL,mBAAS,WAA7C,mBAAOM,EAAP,KAAmBC,EAAnB,KAgCA,OA/BAC,qBAAU,WAYR,OAXAC,IACGC,IACC,0IAEDC,MAAK,SAACC,GACLV,EACEU,EAAIC,KAAKtC,OACPuC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIC,KAAKtC,OAAO0C,OAAS,QAIrD,eACN,CAACf,IAmBF,qBAAKd,UAAU,MAAf,SACE,qBACEA,UAAU,qBACVQ,MAAO,CAAEC,gBAAgB,GAAD,OAAKS,IAF/B,SAIE,qBAAKlB,UAAU,YAAf,SACE,sBAAKA,UAAU,oBAAoBC,GAAG,YAAtC,UAEE,cAAC,EAAD,CACEI,OAAa,OAANP,QAAM,IAANA,OAAA,EAAAA,EAAQO,SAAR,OAAiBQ,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAQR,OAChCC,QAAc,OAANR,QAAM,IAANA,OAAA,EAAAA,EAAQQ,UAAR,OAAkBO,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAQP,UAEpC,cAAC,EAAD,CAAUV,MA7BO,WACzBuB,EAAcF,EAAOS,KAAKC,MAAMD,KAAKE,SAAWX,EAAOY,OAAS,KAChER,IACGC,IACC,0IAEDC,MAAK,SAACC,GACLV,EACEU,EAAIC,KAAKtC,OACPuC,KAAKC,MAAMD,KAAKE,SAAWJ,EAAIC,KAAKtC,OAAO0C,OAAS,QAI5Dd,EAAS1B,EAAawB,KAgBuBhB,MAAOqB,cCrE3CY,EAAQC,YAAe,CAClCC,QAAS,CACP7C,OAAQ8C,KCEZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,W","file":"static/js/main.399d4a88.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  quotes: null,\n}\nexport const quoteSlice = createSlice({\n  name: 'quotes',\n  initialState,\n  reducers: {\n    randomQoutes: (state, action) => {\n      state.quotes = action.payload\n    },\n  },\n})\nexport const { randomQoutes } = quoteSlice.actions\nexport const selectCount = (state) => state.quotes.quotes\nexport default quoteSlice.reducer\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectCount } from './features/counterSlice'\r\nimport TwitterIcon from '@material-ui/icons/Twitter'\r\nimport './Handlers.css'\r\n\r\nfunction Handlers({ Click, color }) {\r\n  const gquote = useSelector(selectCount)\r\n  return (\r\n    <div className='handlers'>\r\n      <a\r\n        id='tweet-quote'\r\n        target='blanck'\r\n        href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(\r\n          '\"' + gquote?.quote + '\" ' + gquote?.author\r\n        )}`}\r\n      >\r\n        <TwitterIcon />\r\n      </a>\r\n      <button\r\n        id='new-quote'\r\n        onClick={Click}\r\n        style={{ backgroundColor: `${color}` }}\r\n      >\r\n        Random\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Handlers\r\n","import React from 'react'\r\nimport './Quotes.css'\r\n\r\nfunction Quotes({ quote, author }) {\r\n  return (\r\n    <div className='quotes' >\r\n      <h1 id='text'><span>\"</span>{quote}</h1>\r\n      <span id='author'>{author}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Quotes\r\n","import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport './App.css'\nimport { randomQoutes, selectCount } from './features/counterSlice'\nimport Handlers from './Handlers'\nimport Quotes from './Quotes'\n\nfunction App() {\n  const gquote = useSelector(selectCount)\n  const [qoutes, setqoutes] = useState([])\n  const dispatch = useDispatch(randomQoutes)\n  const colors = [\n    '#16a085',\n    '#27ae60',\n    '#2c3e50',\n    '#f39c12',\n    '#e74c3c',\n    '#9b59b6',\n    '#FB6964',\n    '#342224',\n    '#472E32',\n    '#BDBB99',\n    '#77B1A9',\n    '#73A857',\n  ]\n\n  const [backGround, setbackGround] = useState('#161623')\n  useEffect(() => {\n    axios\n      .get(\n        'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n      )\n      .then((res) => {\n        setqoutes(\n          res.data.quotes[\n            Math.floor(Math.random() * res.data.quotes.length - 1)\n          ]\n        )\n      })\n    return () => {}\n  }, [setqoutes])\n\n  const randomClickHandler = () => {\n    setbackGround(colors[Math.floor(Math.random() * colors.length - 1)])\n    axios\n      .get(\n        'https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json'\n      )\n      .then((res) => {\n        setqoutes(\n          res.data.quotes[\n            Math.floor(Math.random() * res.data.quotes.length - 1)\n          ]\n        )\n      })\n    dispatch(randomQoutes(qoutes))\n  }\n\n  return (\n    <div className='App'>\n      <div\n        className='background__design'\n        style={{ backgroundColor: `${backGround}` }}\n      >\n        <div className='container'>\n          <div className='container__quotes' id='quote-box'>\n            {/* //random quote */}\n            <Quotes\n              quote={gquote?.quote || qoutes?.quote}\n              author={gquote?.author || qoutes?.author}\n            />\n            <Handlers Click={randomClickHandler} color={backGround} />\n            {/* icons  and buttons*/}\n            {/* <button onClick={randomClickHandler}>Random Quotes</button> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit';\nimport quotedReducer from '../features/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    quotes: quotedReducer,\n  },\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}